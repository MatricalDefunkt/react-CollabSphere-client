pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'sakshamgupta912/collabsphere-client'
        DOCKER_IMAGE_TAG = 'latest'
        SONARQUBE_SERVER = 'SonarQube'
        SONARQUBE_PROJECT_KEY = 'CollabSphere-Client'
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/sakshamgupta912/react-CollabSphere-client', branch: 'v2' 
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'gene-token', variable: 'SONARQUBE_TOKEN')]) {
                    withSonarQubeEnv(SONARQUBE_SERVER) {
                        sh """
                            /opt/sonar-scanner/bin/sonar-scanner \
                                -Dsonar.projectKey=${SONARQUBE_PROJECT_KEY} \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=http://localhost:9000 \
                                -Dsonar.login=${SONARQUBE_TOKEN} \
                                -Dsonar.sourceEncoding=UTF-8
                        """
                    }
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ."
                }
            }
        }

        stage('Run Container') {
            steps {
                script {
                    sh "docker run -d -p 80:80 ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                }
            }
        }

        stage('UI Testing') {
            steps {
                sh "pip install selenium webdriver-manager"
                sh '''
                Xvfb :99 -screen 0 1920x1080x24 &
                export DISPLAY=:99
                python3 selenium.test.py
                '''
            }
        }
    }

    post {
        success {
            echo "CollabSphere client pipeline ended successfully."
        }
        failure {
            echo "Build failed."
        }
        always {
             script {
                sh """
                    docker ps -q --filter "ancestor=${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}" | xargs -r docker stop
                """
            }
        }
    }
}
