pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = 'sakshamgupta912/collabsphere-client'
        DOCKER_IMAGE_TAG = ''  // Will be set dynamically
        SONARQUBE_SERVER = 'SonarQube'
        SONARQUBE_PROJECT_KEY = 'CollabSphere-Client'
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    git url: 'https://github.com/sakshamgupta912/react-CollabSphere-client', branch: 'v2' 
                    env.DOCKER_IMAGE_TAG = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'gene-token', variable: 'SONARQUBE_TOKEN')]) {
                    withSonarQubeEnv(SONARQUBE_SERVER) {
                        sh """
                            /opt/sonar-scanner/bin/sonar-scanner \
                                -Dsonar.projectKey=${SONARQUBE_PROJECT_KEY} \
                                -Dsonar.sources=. \
                                -Dsonar.host.url=http://localhost:9000 \
                                -Dsonar.login=${SONARQUBE_TOKEN} \
                                -Dsonar.sourceEncoding=UTF-8
                        """
                    }
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    sh "docker push ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                }
            }
        }

        stage('Deploy to AKS') {
            steps {
                script {
                    // Update Kubernetes deployment with the specific commit hash tag
                    sh '''
                    kubectl set image deployment/collabsphere-client collabsphere-client=${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} --record
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "CollabSphere client pipeline ended successfully."
        }
        failure {
            echo "Build failed."
        }
        always {
            script {
                sh """
                    docker ps -q --filter "ancestor=${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}" | xargs -r docker stop
                """
            }
        }
    }
}
